#!/usr/bin/python

import os
import sys
import argparse
import urlparse

import baip_loader

CONF = os.path.join(os.sep, 'etc', 'baip', 'conf', 'loader.conf')
DESCRIPTION = """BAIP CSIRO Translation Tool"""


def main():
    """Script entry point.

    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-c',
                        '--config-file',
                        action='store',
                        dest='config_file')

    # Add sub-command support.
    subparsers = parser.add_subparsers(help='commands')

    # 'scrape' subcommand.
    scrape_help = 'Pull data from CSIRO endpoint'
    scrape_parser = subparsers.add_parser('scrape', help=scrape_help)
    scrape_parser.set_defaults(func=scrape)

    infile_help = 'Source XML from filename'
    scrape_parser.add_argument('-i',
                               '--input-file',
                               action='store',
                               help=infile_help,
                               dest='infile')

    outfile_help = 'Override output filename'
    scrape_parser.add_argument('-o',
                               '--outfile',
                               action='store',
                               help=outfile_help,
                               dest='outfile')

    # 'translate' subcommand.
    xlate_help = 'Translate CSIRO XML to JSON'
    xlate_parser = subparsers.add_parser('translate', help=xlate_help)
    xlate_parser.set_defaults(func=xlate)

    infile_help = 'Source XML from filename'
    xlate_parser.add_argument('-i',
                              '--input-file',
                              action='store',
                              help=infile_help,
                              dest='infile')

    outfile_help = 'Override output filename'
    xlate_parser.add_argument('-o',
                              '--outfile',
                              action='store',
                              help=outfile_help,
                              dest='outfile')

    args = parser.parse_args()

    config_file = args.config_file
    if args.config_file is None:
        if os.path.exists(CONF):
            config_file = CONF

    if config_file is None:
        sys.exit('Unable to source the BAIP loader.conf')

    conf = baip_loader.LoaderConfig(config_file)
    conf.parse_config()

    schema = conf.csiro_url_scheme
    netloc = conf.csiro_netloc
    path = conf.csiro_path
    uri = urlparse.urlunsplit((schema, netloc, path, None, None))

    args.func(args, uri)


def scrape(args, uri):
    scraper = baip_loader.Loader()
    scraper.csiro_source_uri = uri

    scraper.source(filename=args.infile)
    if args.outfile is not None:
        scraper.dump_source(args.outfile)


def xlate(args, uri):
    baip_loader.Translator.translate(uri=uri,
                                     infile=args.infile,
                                     outfile=args.outfile)


if __name__ == '__main__':
    main()
